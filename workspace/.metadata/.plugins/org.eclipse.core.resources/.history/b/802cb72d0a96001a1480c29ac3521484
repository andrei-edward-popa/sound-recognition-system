#include "board.h"
#include "fsl_uart.h"

#include <arm_math.h>

#include "pin_mux.h"
#include "clock_config.h"

#include "fsl_debug_console.h"
#include "fsl_sai.h"
#include "fsl_codec_common.h"

#include "fsl_dialog7212.h"
#include "fsl_gpio.h"
#include "fsl_port.h"
#include "fsl_codec_adapter.h"

#define DEMO_UART UART0
#define DEMO_UART_CLKSRC SYS_CLK
#define DEMO_UART_CLK_FREQ CLOCK_GetFreq(SYS_CLK)
#define DEMO_UART_IRQn UART0_RX_TX_IRQn
#define DEMO_UART_IRQHandler UART0_RX_TX_IRQHandler

#define DEMO_CODEC_DA7212
#define DEMO_SAI I2S0
#define DEMO_I2C I2C1
#define DEMO_SAI_CLKSRC kCLOCK_CoreSysClk
#define DEMO_SAI_CLK_FREQ CLOCK_GetFreq(kCLOCK_CoreSysClk)
#define DEMO_I2C_CLKSRC kCLOCK_BusClk
#define DEMO_I2C_CLK_FREQ CLOCK_GetFreq(kCLOCK_BusClk)

#define I2C_RELEASE_SDA_PORT PORTC
#define I2C_RELEASE_SCL_PORT PORTC
#define I2C_RELEASE_SDA_GPIO GPIOC
#define I2C_RELEASE_SDA_PIN 11U
#define I2C_RELEASE_SCL_GPIO GPIOC
#define I2C_RELEASE_SCL_PIN 10U
#define I2C_RELEASE_BUS_COUNT 100U
#define OVER_SAMPLE_RATE (384U)
#define BUFFER_SIZE (1024U)
#define BUFFER_NUMBER (4U)

#define DEMO_AUDIO_SAMPLE_RATE (kSAI_SampleRate16KHz)

#if (defined FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER && FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER) || \
    (defined FSL_FEATURE_PCC_HAS_SAI_DIVIDER && FSL_FEATURE_PCC_HAS_SAI_DIVIDER)
#define DEMO_AUDIO_MASTER_CLOCK OVER_SAMPLE_RATE *DEMO_AUDIO_SAMPLE_RATE
#else
#define DEMO_AUDIO_MASTER_CLOCK DEMO_SAI_CLK_FREQ
#endif

#define DEMO_AUDIO_DATA_CHANNEL (2U)

#define DEMO_AUDIO_BIT_WIDTH kSAI_WordWidth16bits

#ifndef DEMO_SAI_TX_SYNC_MODE
#define DEMO_SAI_TX_SYNC_MODE kSAI_ModeAsync
#endif
#ifndef DEMO_SAI_RX_SYNC_MODE
#define DEMO_SAI_RX_SYNC_MODE kSAI_ModeSync
#endif

void BOARD_I2C_ReleaseBus(void);

da7212_config_t da7212Config = {
    .i2cConfig    = {.codecI2CInstance = BOARD_CODEC_I2C_INSTANCE, .codecI2CSourceClock = 60000000},
    .dacSource    = kDA7212_DACSourceInputStream,
    .slaveAddress = DA7212_ADDRESS,
    .protocol     = kDA7212_BusI2S,
    .format       = {.mclk_HZ = 6144000U, .sampleRate = 16000, .bitWidth = 16},
    .isMaster     = false,
};

AT_NONCACHEABLE_SECTION_ALIGN(static uint8_t Buffer[BUFFER_NUMBER * BUFFER_SIZE], 4);

volatile uint32_t emptyBlock = BUFFER_NUMBER;

#if (defined(FSL_FEATURE_SAI_HAS_MCR) && (FSL_FEATURE_SAI_HAS_MCR)) || \
    (defined(FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER) && (FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER))
sai_master_clock_t mclkConfig = {
#if defined(FSL_FEATURE_SAI_HAS_MCR) && (FSL_FEATURE_SAI_HAS_MCR)
    .mclkOutputEnable = true,
#if !(defined(FSL_FEATURE_SAI_HAS_NO_MCR_MICS) && (FSL_FEATURE_SAI_HAS_NO_MCR_MICS))
    .mclkSource = kSAI_MclkSourceSysclk,
#endif
#endif
};
#endif

codec_config_t boardCodecConfig = {.codecDevType = kCODEC_DA7212, .codecDevConfig = &da7212Config};

sai_handle_t txHandle = {0}, rxHandle = {0};

codec_handle_t codecHandle;

static uint32_t tx_index = 0U, rx_index = 0U;

static void rx_callback(I2S_Type *base, sai_handle_t *handle, status_t status, void *userData) {
    if (kStatus_SAI_RxError == status) {
        /* Handle the error. */
    }
    else {
        emptyBlock--;
    }
}

static void tx_callback(I2S_Type *base, sai_handle_t *handle, status_t status, void *userData) {
    if (kStatus_SAI_TxError == status) {
        /* Handle the error. */
    }
    else {
        emptyBlock++;
    }
}

void UART_Init_Config(uart_config_t *uartConfig) {
	UART_GetDefaultConfig(uartConfig);
	uartConfig->baudRate_Bps = BOARD_DEBUG_UART_BAUDRATE;
	uartConfig->enableTx     = true;
	uartConfig->enableRx     = true;

	UART_Init(DEMO_UART, uartConfig, DEMO_UART_CLK_FREQ);
}

void SAI_Init_Config(sai_transceiver_t *saiConfig, sai_handle_t *txHandle, sai_handle_t *rxHandle, sai_master_clock_t *mclkConfig,
					 codec_handle_t *codecHandle, codec_config_t *boardCodecConfig) {
	SAI_Init(DEMO_SAI);
	SAI_TransferTxCreateHandle(DEMO_SAI, txHandle, tx_callback, NULL);
	SAI_TransferRxCreateHandle(DEMO_SAI, rxHandle, rx_callback, NULL);

	SAI_GetClassicI2SConfig(saiConfig, DEMO_AUDIO_BIT_WIDTH, kSAI_Stereo, kSAI_Channel0Mask);
	saiConfig->syncMode = DEMO_SAI_TX_SYNC_MODE;
	SAI_TransferTxSetConfig(DEMO_SAI, txHandle, saiConfig);
	saiConfig->syncMode = DEMO_SAI_RX_SYNC_MODE;
	SAI_TransferRxSetConfig(DEMO_SAI, rxHandle, saiConfig);

	SAI_TxSetBitClockRate(DEMO_SAI, DEMO_AUDIO_MASTER_CLOCK, DEMO_AUDIO_SAMPLE_RATE, DEMO_AUDIO_BIT_WIDTH,
						  DEMO_AUDIO_DATA_CHANNEL);
	SAI_RxSetBitClockRate(DEMO_SAI, DEMO_AUDIO_MASTER_CLOCK, DEMO_AUDIO_SAMPLE_RATE, DEMO_AUDIO_BIT_WIDTH,
						  DEMO_AUDIO_DATA_CHANNEL);

#if (defined(FSL_FEATURE_SAI_HAS_MCR) && (FSL_FEATURE_SAI_HAS_MCR)) || \
	(defined(FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER) && (FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER))
#if defined(FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER) && (FSL_FEATURE_SAI_HAS_MCLKDIV_REGISTER)
	mclkConfig->mclkHz          = DEMO_AUDIO_MASTER_CLOCK;
	mclkConfig->mclkSourceClkHz = DEMO_SAI_CLK_FREQ;
#endif
	SAI_SetMasterClockConfig(DEMO_SAI, mclkConfig);
#endif

	CODEC_Init(codecHandle, boardCodecConfig);

#if defined DIG_MIC
	DA7212_ChangeInput((da7212_handle_t *)((uint32_t)(codecHandle->codecDevHandle)), kDA7212_Input_MIC1_Dig);
#endif
}


int main(void) {
	unsigned char __697hz_raw[] = {
	  0x00, 0x00, 0x4d, 0x35, 0x04, 0x5b, 0x24, 0x66, 0x67, 0x53, 0x4e, 0x28,
	  0x68, 0xf1, 0xcd, 0xbe, 0x36, 0x9f, 0xf5, 0x9b, 0xe6, 0xb5, 0x87, 0xe5,
	  0xe1, 0x1c, 0xca, 0x4b, 0x8e, 0x64, 0xf0, 0x5f, 0x43, 0x3f, 0x1f, 0x0c,
	  0x6b, 0xd5, 0x2d, 0xab, 0xb5, 0x99, 0x29, 0xa6, 0xd6, 0xcc, 0x80, 0x02,
	  0x69, 0x37, 0x22, 0x5c, 0xee, 0x65, 0xf0, 0x51, 0xfe, 0x25, 0xf4, 0xee,
	  0xe2, 0xbc, 0x71, 0x9e, 0x81, 0x9c, 0xa6, 0xb7, 0xf2, 0xe7, 0x3f, 0x1f,
	  0x76, 0x4d, 0xfd, 0x64, 0x09, 0x5f, 0x4a, 0x3d, 0xa3, 0x09, 0x2a, 0xd3,
	  0xcd, 0xa9, 0xa2, 0x99, 0x5c, 0xa7, 0x0b, 0xcf, 0xf6, 0x04, 0x82, 0x39,
	  0x2f, 0x5d, 0xab, 0x65, 0x6a, 0x50, 0xac, 0x23, 0x7e, 0xec, 0x07, 0xbb,
	  0xb5, 0x9d, 0x20, 0x9d, 0x71, 0xb9, 0x5b, 0xea, 0xa5, 0x21, 0x08, 0x4f,
	  0x67, 0x65, 0x0e, 0x5e, 0x49, 0x3b, 0x27, 0x07, 0xef, 0xd0, 0x7c, 0xa8,
	  0x99, 0x99, 0xa6, 0xa8, 0x3a, 0xd1, 0x79, 0x07, 0x89, 0x3b, 0x33, 0x5e,
	  0x56, 0x65, 0xd8, 0x4e, 0x53, 0x21, 0x0e, 0xea, 0x34, 0xb9, 0x0a, 0x9d,
	  0xce, 0x9d, 0x41, 0xbb, 0xd2, 0xec, 0xf7, 0x23, 0x9e, 0x50, 0xb4, 0x65,
	  0x0d, 0x5d, 0x3c, 0x39, 0xa8, 0x04, 0xbe, 0xce, 0x37, 0xa7, 0xa0, 0x99,
	  0xfc, 0xa9, 0x73, 0xd3, 0xf6, 0x09, 0x8d, 0x3d, 0x24, 0x5f, 0xf4, 0x64,
	  0x3b, 0x4d, 0xf5, 0x1e, 0xa0, 0xe7, 0x6b, 0xb7, 0x6f, 0x9c, 0x8a, 0x9e,
	  0x20, 0xbd, 0x47, 0xef, 0x46, 0x26, 0x27, 0x52, 0xf1, 0x65, 0x01, 0x5c,
	  0x23, 0x37, 0x2b, 0x02, 0x94, 0xcc, 0xfc, 0xa5, 0xbd, 0x99, 0x58, 0xab,
	  0xb9, 0xd5, 0x6d, 0x0c, 0x88, 0x3f, 0x09, 0x60, 0x80, 0x64, 0x93, 0x4b,
	  0x91, 0x1c, 0x36, 0xe5, 0xb2, 0xb5, 0xdc, 0x9b, 0x5a, 0x9f, 0x05, 0xbf,
	  0xbe, 0xf1, 0x98, 0x28, 0x96, 0x53, 0x2c, 0x66, 0xdc, 0x5a, 0x09, 0x35,
	  0xab, 0xff, 0x6f, 0xca, 0xd5, 0xa4, 0xe2, 0x99, 0xca, 0xac, 0xfc, 0xd7,
	  0xeb, 0x0e, 0x73, 0x41, 0xe2, 0x60, 0xfd, 0x63, 0xde, 0x49, 0x2b, 0x1a,
	  0xd1, 0xe2, 0xfe, 0xb3, 0x61, 0x9b, 0x31, 0xa0, 0xf8, 0xc0, 0x39, 0xf4,
	  0xdb, 0x2a, 0x05, 0x55, 0x4b, 0x66, 0xb2, 0x59, 0xe2, 0x32, 0x2d, 0xfd,
	  0x53, 0xc8, 0xb9, 0xa3, 0x1a, 0x9a, 0x43, 0xae, 0x4d, 0xda, 0x5e, 0x11,
	  0x5b, 0x43, 0xa8, 0x61, 0x6d, 0x63, 0x1d, 0x48, 0xc3, 0x17, 0x6a, 0xe0,
	  0x5d, 0xb2, 0xef, 0x9a, 0x1a, 0xa1, 0xf6, 0xc2, 0xb0, 0xf6, 0x1f, 0x2d,
	  0x5f, 0x56, 0x62, 0x66, 0x76, 0x58, 0xb4, 0x30, 0xb1, 0xfa, 0x3d, 0xc6,
	  0xaf, 0xa2, 0x5d, 0x9a, 0xcc, 0xaf, 0x9f, 0xdc, 0xd5, 0x13, 0x34, 0x45,
	  0x63, 0x62, 0xc9, 0x62, 0x56, 0x46, 0x51, 0x15, 0x12, 0xde, 0xbe, 0xb0,
	  0x93, 0x9a, 0x10, 0xa2, 0xf9, 0xc4, 0x30, 0xf9, 0x54, 0x2f, 0xb3, 0x57,
	  0x65, 0x66, 0x2e, 0x57, 0x80, 0x2e, 0x32, 0xf8, 0x35, 0xc4, 0xac, 0xa1,
	  0xb6, 0x9a, 0x5d, 0xb1, 0xfb, 0xde, 0x42, 0x16, 0x08, 0x47, 0x0b, 0x63,
	  0x19, 0x62, 0x84, 0x44, 0xda, 0x12, 0xc0, 0xdb, 0x2b, 0xaf, 0x48, 0x9a,
	  0x0e, 0xa3, 0x0f, 0xc7, 0xa6, 0xfb, 0x8c, 0x31, 0xf3, 0x58, 0x5a, 0x66,
	  0xdc, 0x55, 0x3e, 0x2c, 0xbc, 0xf5, 0x2f, 0xc2, 0xbe, 0xa0, 0x1c, 0x9b,
	  0xf9, 0xb2, 0x5c, 0xe1, 0xad, 0x18, 0xd0, 0x48, 0xa4, 0x63, 0x5f, 0x61,
	  0x9d, 0x42, 0x6e, 0x10, 0x66, 0xd9, 0xaf, 0xad, 0x03, 0x9a, 0x25, 0xa4,
	  0x22, 0xc9, 0x28, 0xfe, 0xb4, 0x33, 0x29, 0x5a, 0x41, 0x66, 0x76, 0x54,
	  0x00, 0x2a, 0x3e, 0xf3, 0x3a, 0xc0, 0xd9, 0x9f, 0x90, 0x9b, 0xa6, 0xb4,
	  0xbc, 0xe3, 0x1a, 0x1b, 0x8a, 0x4a, 0x2e, 0x64
	};
	unsigned int __697hz_raw_len = 512;
	q15_t output[512];
	arm_rfft_instance_q15 RealFFT_Instance;
	arm_status status = arm_rfft_init_q15(&RealFFT_Instance, 256, 0, 1);
	printf("%d\n", status);
	arm_rfft_q15(&RealFFT_Instance, (q15_t *)__697hz_raw, output);
	arm_abs_q15(output, output, 256);
//	for (uint32_t i = 0; i < 4; i++) {
//		printf("%d\n", source[i]);
//	}




//	sai_transfer_t xfer;
//	uart_config_t uart_config;
//	sai_transceiver_t sai_config;
//
//	BOARD_InitPins();
//	BOARD_BootClockRUN();
//	BOARD_InitDebugConsole();
//
//	UART_Init_Config(&uart_config);
//	SAI_Init_Config(&sai_config, &txHandle, &rxHandle, &mclkConfig, &codecHandle, &boardCodecConfig);
//
//
//
//
//    int k = 0;
//    int16_t samples[16000 * 6];
//
//    while (k < 375) {
//        if (emptyBlock > 0) {
//            xfer.data     = Buffer + rx_index * BUFFER_SIZE;
//            xfer.dataSize = BUFFER_SIZE;
//            if (kStatus_Success == SAI_TransferReceiveNonBlocking(DEMO_SAI, &rxHandle, &xfer)) {
//                rx_index++;
//            }
//            if (rx_index == BUFFER_NUMBER) {
//                rx_index = 0U;
//            }
//        }
//        if (emptyBlock < BUFFER_NUMBER) {
//            xfer.data     = Buffer + tx_index * BUFFER_SIZE;
//            xfer.dataSize = BUFFER_SIZE;
//            if (kStatus_Success == SAI_TransferSendNonBlocking(DEMO_SAI, &txHandle, &xfer)) {
//				for (uint32_t i = 0; i < BUFFER_SIZE; i += 4) {
////					uint8_t combined[6];
//					int16_t sample = ((int16_t)xfer.data[i + 1] << 8) | xfer.data[i];
//					samples[k * BUFFER_SIZE / 4 + i / 4] = sample;
////					sprintf((char*)combined, "%hd", sample);
////					UART_WriteBlocking(DEMO_UART, combined, sizeof(combined) / sizeof(combined[0]));
////					UART_WriteByte(DEMO_UART, '\n');
////					UART_WriteByte(DEMO_UART, '\r');
//				}
//            	k++;
////            	if (k == 64) {
////            		UART_WriteByte(DEMO_UART, 'a');
////            		k = 0;
////            	}
//            	tx_index++;
//            }
//            if (tx_index == BUFFER_NUMBER) {
//                tx_index = 0U;
//            }
//        }
//    }
//    for (int i = 0; i < 96000; i++) {
//		uint8_t combined[6];
//		sprintf((char*)combined, "%hd", samples[i]);
//		UART_WriteBlocking(DEMO_UART, combined, sizeof(combined) / sizeof(combined[0]));
//		UART_WriteByte(DEMO_UART, '\n');
//		UART_WriteByte(DEMO_UART, '\r');
//	}
    return 0;
}
